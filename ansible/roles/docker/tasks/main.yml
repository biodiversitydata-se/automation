- name: Install aptitude
  apt:
    name: aptitude
    state: latest
    update_cache: true

- name: Add docker repo key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker repo
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
    state: present

- name: Install basic packages
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest
    update_cache: true

#- name: Install basic python packages
#  pip:
#    name:
#    - docker
#    - jsondiff
#    - pyyaml

- name: Update apt and install docker-ce
  package:
    name: docker-ce
    state: latest
    update_cache: true

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Load kernel module ip_vs (seems to be neded by swarm)
  modprobe:
    name: ip_vs
    state: present

- name: Ensure module ip_vs is loded at reboot
  ansible.builtin.lineinfile:
    path: /etc/modules
    regexp: '^ip_vs'
    line: ip_vs

- name: Download and install docker compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64"
    timeout: 30
    dest: /usr/local/bin/docker-compose
    owner: root
    mode: 0755

- name: "Check if the directory /docker/var/lib/{{ host_name }} exists"
  stat:
    path: "/docker/var/lib/{{host_name}}"
  register: docker_var_lib_stat

- name: "Make sure the directory /docker/var/lib/{{ host_name }} exists"
  file:
    path: "/docker/var/lib/{{host_name}}"
    owner: root
    group: root
    mode: 0750
    recurse: yes
    state: directory
  when: not docker_var_lib_stat.stat.exists

- name: copy Docker daemon config
  template:
    src: daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0664
  notify:
    - restart docker
  tags:
    - daemon_json

- name: Add admin users to docker group
  user:
    name: '{{ item.key }}'
    groups: docker
    append: yes
  with_dict: "{{ admin_users }}"
  when: item.value['state'] == "present"
  notify:
    - restart docker
