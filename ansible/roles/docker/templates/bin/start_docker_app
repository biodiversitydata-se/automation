#! /bin/bash
cd $(dirname $0)
. /opt/sbdi/lib/log_utils

# TODO: https://opensource.com/article/18/3/creating-bash-completion-script

log_logging_application="MGM"

[ $EUID -eq 0 ] && log_fatal 88 "Do *not* run as root"
if ! id -nG "$USER" | grep -qw "docker"
then
    log_fatal 88 "User must belong to group 'docker'"
fi
contains() {
    [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]] && exit(0) || exit(1)
}

export SWARM_MANAGERS="{% for host in groups['swarm_managers'] %}{{deployment_prefix}}-{{ host }} % endfor %}"

if ! contains $SWARM_MANAGERS $HOSTNAME
then
    log_fatal 89 "Must be run on a swarm manager..."
fi

USAGE="USAGE: $0 <application_name>"

export DOCKER_CTX={{ docker_ctx | default('/docker') }}
export DOCKER_LOCAL_CTX="${DOCKER_CTX}_local"
export deployment_prefix="{{ deployment_prefix }}"

application_name=$1
if [ -z "${application_name}" ]
then
    log_fatal 91 "No application name provided. Usage: $USAGE"
fi

log_logging_application="MGM/${application_name}"

if [ ! -d ${DOCKER_CTX}/etc/${application_name} ]
then
    log_fatal 92 "Unknown application. No application found in ${DOCKER_CTX}/etc/${application_name}"
fi

if ! /opt/sbdi/bin/ensure_docker_host_labels
then
    log_fatal 93 "Unable to ensure docker host labels"
fi
   
#if [ ! -e  ${DOCKER_CTX}/etc/${application_name}/application.cfg ]
#then
#    log_fatal 94 "${DOCKER_CTX}/etc/${application_name}/application.cfg does not exist ..."
#fi
#
#. ${DOCKER_CTX}/etc/${application_name}/application.cfg

export VOLUMES_CTX=${DOCKER_CTX}/var/volumes/${application_name}
export LOCAL_VOLUMES_CTX=${DOCKER_LOCAL_CTX}/var/volumes/${application_name}

docker_compose_file="${DOCKER_CTX}/etc/${application_name}/docker-compose.yml"
if [ ! -e ${docker_compose_file} ]
then
    log_fatal 95 "${docker_compose_file}  does not exist ..."
fi

# Read docker compose file and create empty global (gluster) volumes if needed
readarray volumes < <(yq ".volumes|keys|.[]"  ${docker_compose_file})
for volume_key in ${volumes[@]}
do
    log_debug "Found volume: ${volume_key}"
    volume_device=$(yq ".volumes.${volume_key}.driver_opts.device" ${docker_compose_file})
    if [ "$volume_device" != "null" ]
    then
	if [[ "$volume_device" =~ ${VOLUMES_CTX}/(.*) ]]
	then
	    log_debug "Found a global volume: ${volume_key}"
	    volume_name=${BASH_REMATCH[1]}
	    if [ -e ${VOLUMES_CTX}/${volume_name} ]
	    then
		log_info "Volume ${volume_name} exists in ${VOLUMES_CTX}"
	    else
		if sudo /opt/sbdi/bin/ensure_global_docker_volume -application ${application_name} -volume ${volume_name}
		then
		    log_info "Created empty global volume  ${volume_name}"
		else
		    log_fatal 96 "Failed to created empty global volume  ${VOLUMES_CTX}/${volume_name}"
		fi
	    fi
	else
	    log_debug "Found a non global volume ${volume_key}"
	fi
    else
	log_fatal 97 "Found a volume declaration for volume: ${volume_name} without a device"
    fi	    
done

# if [[ -z ${DOCKER_VOLUMES+x} ]]
# then
#     log_warn "DOCKER_VOLUMES not defined in ${DOCKER_CTX}/etc/${application_name}/application.cfg"
# else
#     for volume_name in ${DOCKER_VOLUMES}
#     do
# 	if [ -e ${VOLUMES_CTX}/${volume_name} ]
# 	then
# 	    log_info "Volume ${volume_name} exists in ${VOLUMES_CTX}"
# 	else
# 	    if sudo /opt/sbdi/bin/ensure_global_docker_volume -application ${application_name} -volume ${volume_name}
# 	    then
# 		log_info "Created empty volume  ${volume_name}"
# 	    else
# 		log_fatal 96 "Failed to created empty volume  ${VOLUMES_CTX}/${volume_name}"
# 	    fi
# 	fi
#     done
# fi

# Read docker compose file and create empty local volumes if needed

readarray services < <(yq '.services|keys| .[]'  ${docker_compose_file})
for service in ${services[@]}
do
    placement_constraint=$(yq ".services.${service}.deploy.placement.constraints" ${docker_compose_file})
    if [ "$placement_constraint" != "null" ]
    then
	log_debug "$service has placement constraint: $placement_constraint"
	host="null"
	if [[ "$placement_constraint" =~ ^.*node\.hostname[[:space:]]*==[[:space:]]*([a-zA-Z0-9_-]+).*$ ]]
	then
	    host=${BASH_REMATCH[1]}
	    log_debug "$service is allocated (by hostname) to: $host"
	elif [[ "$placement_constraint" =~ ^.*node\.label\.deployment_host.*==[[:space:]]*([a-zA-Z0-9_-]+).*$ ]]
	then
	    host="${deployment_prefix}-${BASH_REMATCH[1]}"
	    log_debug "$service is allocated (by label) to: $host"
	else
	    log_warn "Unable to interpret placement constraint for service $service: $placement_constraint"
	fi
	log_info "$service is allocated to: $host"
	if [ "$host" != "null" ]
	then
	    readarray volumes < <(yq ".services.${service}.volumes|.[]"  ${docker_compose_file})
	    for volume in ${volumes[@]}
	    do
		log_debug "Found volume declaration for service: $service : ${volume}"
		volume_key=${volume%%:*}
		log_debug "$service has volume: ${volume_key}"
		volume_device=$(yq ".volumes.${volume_key}.driver_opts.device" ${docker_compose_file})
		if [ "$volume_device" != "null" ]
		then
		    if [[ "$volume_device" =~ ${LOCAL_VOLUMES_CTX}/(.*) ]]
		    then
			volume_name=${BASH_REMATCH[1]}
			ssh ${USER}@${host} "[ -e ${LOCAL_VOLUMES_CTX}/${volume_name} ]"
			volume_test_result=$?
			if [ $? = 0 ]
			then
			    log_info "Volume: $volume_name exists in: ${LOCAL_VOLUMES_CTX} on host: ${host}"
			elif [ $? = 1]
			then
			    log_info "Trying to create local volume: $volume_name for application: $application_name (service: $service) on host: ${host}"
		       
			    if ssh -t ${USER}@${host} "sudo /opt/sbdi/bin/ensure_local_docker_volume -application ${application_name} -volume ${volume_name}"
			    then
				log_info "Created local volume: $volume_name for application: $application_name (service: $service) on host: ${host}"
			    else
				log_fatal 98 "Failed to create local volume: $volume_name for application: $application_name (service: $service) on host: ${host}"
			    fi
			else
			    log_fatal 99 "Unable to ssh to host: ${host} (Remember to bring your key with -A)"
			fi
		    else
			log_debug "$service has a non local volume device ${volume_device} on host: ${host}"
		    fi
		else
		    log_warn "No volume device declared for volume: ${volume_key} of service: $service" 
		fi
	    done
	fi
    fi
done


cd ${DOCKER_CTX}/etc/${application_name}

restart_httpproxy=false

if [ -e 'proxy.conf' ]
then
    proxy_conf_file="${DOCKER_CTX}/etc/httpproxy/conf.d/${application_name}.conf"
    if cp proxy.conf "${proxy_conf_file}"
    then
	restart_httpproxy=true
	log_info "Created proxy conf file: ${proxy_conf_file}"
    else
	log_warn "Failed to create proxy conf file: ${proxy_conf_file}"
    fi
fi

export CURRENT_USER=$(id -u):$(id -g)

log_info "Deploying docker swarm stack ${application_name}"
if docker stack deploy --compose-file=docker-compose.yml ${application_name}
then
    log_info "Deployed docker application (i.e. swarm stack): ${application_name} - OK"
else
    log_fatal 99 "Failed to deploy docker application (i.e. swarm stack): ${application_name}"
fi

if $restart_httpproxy
then
    # TODO: check if httpproxy is installed
    # TODO: logging and exit codes
    ${DOCKER_CTX}/usr/httpproxy/bin/restart.sh
fi

