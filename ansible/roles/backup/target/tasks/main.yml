- name: Install ZFS and rsync
  apt:
    pkg:
      - zfsutils-linux
      - rsync
      
- name: Check if mount point for backup data "/backup" exists
  stat:
    path: /backup
  register: backup_mount_point
    
- name: Ensure mount point /backup
  file:
    path: /backup
    state: directory
    owner: root
    group: root
    mode: 0775
  when: backup_mount_point.stat.exists == false
    
- name: Ensure backup data device is not mounted as at host creation
  mount:
    path: /mnt
    src: "{{ backup_data_device }}"
    state: absent
    
- name: Check for ZFS "backup" pool existence
  shell: zpool list -Ho name backup 2>/dev/null | wc -l
  register: number_of_matching_zpools

# - debug:
#     var: number_of_matching_zpools
    
- name: Read backup data device information (always use unit when probing)
  parted: "device={{ backup_data_device }} unit=MiB"
  register: data_device_info
  when: number_of_matching_zpools.stdout == "0"

# - name: Output disks
#   debug:
#     msg: "{{ data_device_info }}"
#   when: number_of_matching_zpools.stdout == "0"

- name: Remove all partitions from data device if not already zfs pool exists
  parted:
    device: "{{ backup_data_device }}"
    number: "{{ item.num }}"
    state: absent
  with_items:
   - "{{ data_device_info.partitions }}"
  when: number_of_matching_zpools.stdout == "0"

- name: Reboot the machine (workarround for bug in sticky mount)
  reboot:    
  when: number_of_matching_zpools.stdout == "0"
    
- name: Create ZFS "backup" zpool
  command: "zpool create -m /backup backup {{ backup_data_device }}"
  when: number_of_matching_zpools.stdout == "0"

- name: Enable gzip-7 compression
  command: "zfs set compression=gzip-7 backup"

- name: Create ZFS "backup/current" filesystem
  command: "zfs create backup/current"
  when: number_of_matching_zpools.stdout == "0"

- name: Ensure "/opt/sbdi/backup/bin" folder
  file: 
    path: /opt/sbdi/backup/bin
    owner: root 
    group: root
    mode: 0755 
    state: directory
    
- name: Install backup scripts
  copy:
    src: "bin/{{ item }}"
    dest: /opt/sbdi/backup/bin/{{ item }}
    owner: root
    group: root
    mode: 0755
  with_items:
    - create_backup_snapshot
    - activate_latest_backup_snapshot
    - activate_backup_snapshot
    - deactivate_backup_snapshot
    - list_backups

- name: Install "restore backup" script
  template:
    src: "bin/{{ item }}"
    dest: /opt/sbdi/backup/bin/{{ item }}
    owner: root
    group: root
    mode: 0755
  with_items:
    - restore_backup_snapshot

- name: Install sudoers file for backupoperator
  copy:
    src: "42-backupoperator"
    dest: /etc/sudoers.d/42-backupoperator
    owner: root
    group: root
    mode: 0110

# Backup targets preform rsync via SSH when restoring backup data as root -> backup sources
# Thus make sure bakup sources are known to root user:
  
# - name: Remove known_hosts file of root
#   file:
#     state: absent
#     path: /root/.ssh/known_hosts

- name: Remove previous backup targets SSH host keys for hostnames
  shell:  "ssh-keygen -R  {{ deployment_prefix }}-{{ item }}"
  ignore_errors: yes
  with_items: "{{ groups['backup_sources'] }}"
  tags:
    - host_keys

- name: Remove previous backup targets SSH host keys for fqdns
  shell:  "ssh-keygen -R {{ deployment_prefix }}-{{ item }}.{{ domain }}"
  ignore_errors: yes
  with_items: "{{ groups['backup_sources'] }}"
  tags:
    - host_keys
  
- name: Remove previous SSH host keys for ips
  shell:  "ssh-keygen -R {{ hostvars[item]['common_ip_part'] }}{{ hostvars[item]['nbr'] }}"
  ignore_errors: yes
  with_items: "{{ groups['backup_sources'] }}"        
  tags:
    - host_keys

- name: Accept SSH host keys for hostnames
  shell:  "ssh-keyscan -H {{ deployment_prefix }}-{{ item }} >> /root/.ssh/known_hosts"
  register: keyscan_result
  until: keyscan_result is succeeded
  retries: 10
  delay: 1
  with_items: "{{ groups['backup_sources'] }}"
  tags:
    - host_keys

- name: Accept SSH host keys for  fqdns
  shell:  "ssh-keyscan -H {{ deployment_prefix }}-{{ item }}.{{ domain }} >> /root/.ssh/known_hosts"
  register: keyscan_result
  until: keyscan_result is succeeded
  retries: 10
  delay: 1
  with_items: "{{ groups['backup_sources'] }}"
  tags:
    - host_keys

- name: Accept SSH host keys for ips
  shell:  "ssh-keyscan -H {{ hostvars[item]['common_ip_part'] }}{{ hostvars[item]['nbr'] }} >> /root/.ssh/known_hosts"
  register: keyscan_result
  until: keyscan_result is succeeded
  retries: 10
  delay: 1
  with_items: "{{ groups['backup_sources'] }}"
  tags:
    - host_keys
