# CAS server that management app will authenticate with
# This server will authenticate for any app (service) and you can login as casuser/Mellon
cas.server.name=https://auth.{{ domain }}
cas.server.prefix=${cas.server.name}/cas

mgmt.serverName=https://auth.{{ domain }}
mgmt.adminRoles[0]=ROLE_ADMIN
mgmt.authzAttributes[0]=role
mgmt.userPropertiesFile=file:/data/cas-management/config/users.properties
mgmt.enableVersionControl=false
mgmt.servicesRepo=/data/cas-management/services-repo
mgmt.userReposDir=/data/cas-management/user-repos

server.context-path=/cas-management
server.port=9000
server.ssl.enabled=false

spring.thymeleaf.mode=HTML
logging.config=file:/data/cas-management/config/log4j2.xml

#logging.config=file:/etc/cas/config/log4j2-management.xml

cas.authn.attributeRepository.jdbc[0].dataSourceName=
cas.authn.attributeRepository.jdbc[0].url=jdbc:mysql://mysqldbcas:3306/emmet?serverTimezone=Europe/Paris&zeroDateTimeBehavior=convertToNull&characterEncoding=UTF-8&useSSL=true
cas.authn.attributeRepository.jdbc[0].user=$CAS_DB_USERNAME
cas.authn.attributeRepository.jdbc[0].password=$CAS_DB_PASSWORD

cas.serviceRegistry.mongo.sslEnabled=false
cas.serviceRegistry.mongo.clientUri=
cas.serviceRegistry.mongo.host=mongodbcas
cas.serviceRegistry.mongo.port=27017
cas.serviceRegistry.mongo.replicaSet=
cas.serviceRegistry.mongo.collection=services
cas.serviceRegistry.mongo.databaseName=cas-service-registry
cas.serviceRegistry.mongo.authenticationDatabaseName=cas-service-registry
cas.serviceRegistry.mongo.userId=$CAS_SERVICES_USERNAME
cas.serviceRegistry.mongo.password=$CAS_SERVICES_PASSWORD

spring.session.store-type=none
