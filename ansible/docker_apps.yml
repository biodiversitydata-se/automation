---
# To deploy only one docker_applications
#
# ansible-playbook docker_apps.yml --extra-vars "only_app=<app_name>"
#
# To not also deploy static (that takes a lot of time...)
#
# ansible-playbook docker_apps.yml --skip-tags "static_html"
#
# example: Only deploy the species stack/docker app without redeploying static_html and haproxy
#
# ansible-playbook docker_apps.yml --skip-tags "static_html, haproxy" --extra-vars "only_app=species"

# Work in progress
# - name: Fix local volumes
#   hosts: docker:docker_swarm
#   become: true
#   tasks:
#     - name: Make sure '/var/lib/docker_volume' is a link to  '/docker/var/lib/<hostname>/volumes'
#       file:
#         src: "/docker/var/lib/{{host_name}}/volumes"
#         dest: "/var/lib/docker_volumes"
#         owner: root
#         group: root
#         mode: 0750
#         state: link

    
# - name: Setup docker networks
#   hosts: swarm_managers[0]
#   tasks:
#     - name: Create docker network 'sbdi_frontend'
#       docker_network:
#         name: "sbdi_frontend"
#         scope: swarm
#         driver: overlay
#         #        internal: yes
#         appends: yes
#         ipam_config:
#           - subnet: 10.211.1.0/24
            
- name: Install Docker Swarm Applications
  hosts: swarm_managers[0]
  vars:
    docker_ctx: "{{ docker_root | default('/docker') }}"
    application_declarations: "{{ docker_applications | dict2items }}"
  become: true
  tags:
    - applications
  tasks:

  - name: Deploy applications
    include_role:
      name: "{{ application_declaration.value['role']}}"
    when: only_app is not defined or application_declaration.key == only_app
    loop: "{{ application_declarations }}"
    loop_control:
      loop_var: application_declaration

# TODO: Inject config here somehow
# There is a bug in ansible that excludes vars: "{{ application_declaration.value['config'] }}"
# Might work with a vars_from file:
# https://docs.ansible.com/ansible/2.3/include_role_module.html
      

  - name: Setup environment configuration for all applications
    copy:
      src: "docker/etc/{{application_declaration.key}}/{{deployment_prefix}}/"
      dest: "{{ docker_ctx }}/etc/{{application_declaration.key}}/env/"
      decrypt: true
      owner: root
      group: docker
      mode: 0640
    when: only_app is not defined or application_declaration.key == only_app
    loop: "{{ application_declarations }}"
    loop_control:
      loop_var: application_declaration
    tags:
      - configuration

- name: Setup Docker Swarm Applications local storage
  hosts: docker_swarm
  vars:
    docker_ctx: "{{ docker_root | default('/docker') }}"
    application_declarations: "{{ docker_applications | dict2items }}"
  become: true
  tags:
    - local_applications
  tasks:

  - name: Deploy applications local storage
    include_role:
      name: "{{ application_declaration.value['role']}}"
      tasks_from: local_docker.yml
    when: application_declaration.value['config'].local and (only_app is not defined or application_declaration.key == only_app)
    loop: "{{ application_declarations }}"
    loop_control:
      loop_var: application_declaration      
      
- name: Deploy HTTP proxy
  hosts: swarm_managers[0]
  vars:
    docker_ctx: "{{ docker_root | default('/docker') }}"
    application_declarations: "{{ docker_applications | dict2items }}"
  become: true
  tags:
    - httpproxy
  roles:
    - httpproxy


- name: Setup HA proxy access
  hosts: gateways
  become: true
  tags:
    - haproxy
  roles:
    - haproxy


